<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ux_client_script">
    <sys_ux_client_script action="INSERT_OR_UPDATE">
        <includes>d67f1bbeb7e21010ad44ea56ee11a9d3,881d20a10fe21010ad4437a98b767e2a,e3e0d376b7e21010ad44ea56ee11a924,a68702f6b7621010ad44ea56ee11a90e,2bb5c53d0fa61010ad4437a98b767e7f,17c0853d0fa61010ad4437a98b767e13</includes>
        <macroponent display_value="Visual Board Demo Page">5a0e553e474e4150d384ee82e36d4334</macroponent>
        <name>Visual Board Client Specific Script</name>
        <required_translations/>
        <script><![CDATA[function script({api, event, state, imports, helpers}) {
	console.log("script called");
	const {
		'sn_vtb.constants': constantsInclude,
		'sn_vtb.cardHandlers': cardHandlersInclude,
		'sn_vtb.laneHandlers': laneHandlersInclude,
		'sn_vtb.stateUpdates': stateUpdatesInclude,
		'sn_vtb.cardManagerMethods': cardManagerMethodsInclude,
		'sn_vtb.utils': utilsInclude
	} = imports;
	const {
		snHttp
	} = helpers;
	const {
		execGraphQLEndPoint,
		resetFocusableItemOnBoard
	} = utilsInclude();
	const {
		ACTIONS: {
			VTB_CREATE_LANE_ACTION_PERFORMED,
			VTB_SWIMLANE_ACTION,
			VTB_ADD_CARD_CLICKED,
			VTB_FREEFORM_CARD_ADDED,
			VTB_REMOVE_FREEFORM_PLACEHOLDER_CARD,
			VTB_ATTACHMENT_UPLOADED,
			CARD_MOVED,
			LANE_MOVED,
			SWIMLANE_MOVED,
			VTB_DATA_DRIVEN_CARD_ADDED,
			VTB_LANE_HIDE_SELECTED,
			VTB_LANE_HEADER_UPDATED,
			VTB_LANE_HOVERED,
			VTB_CONFIRMATION_MODAL_SELECTED
		}
	} = constantsInclude();
	const {
		setBoardState,
		setBoardFocusState,
		setBoardDirtyState
	} = stateUpdatesInclude();

	const {
		addPlaceHolderCardhandler,
		removePlaceHolderCardHandler,
		uploadAttachmentHandler,
		moveCardOptimisticHandler,
		addDataDrivenOptimisticCardHandler
	} = cardHandlersInclude();
	const {
		swimlaneActionHandler,
		moveLaneOptimisticHandler,
		moveSwimlaneOptimisticHandler,
		hideLaneOptimisticHandler,
		laneHeaderOptimisticUpdateHandler,
		laneHoverHandler
	} = laneHandlersInclude();

	const {
		constructVtbCardFormData
	} = cardManagerMethodsInclude();
	let name = event.name, payload = event.payload;
	if (event.payload.actionName) {
		name = event.payload.actionName;
		payload = event.payload.payload;
	}

	const {
		emit: dispatch,
	} = api;
	const {
		boardState,
		boardDirtyState = {},
		boardFocusState = {},
	} = api.state;


	let output = {};
	switch (name) {
		case VTB_SWIMLANE_ACTION:
			output.newBoardState = swimlaneActionHandler(boardState, payload);
			break;

		case VTB_ADD_CARD_CLICKED:
			if (boardState.boardType === 'FREEFORM') {
				let newStateWithoutFocusedElement = resetFocusableItemOnBoard(boardState, boardFocusState);
				output.newBoardState = addPlaceHolderCardhandler(newStateWithoutFocusedElement, payload);
				output.newBoardDirtyState = boardState;
			  }

			else {
				// For guided board we have to construct form for vtb card.
				const newCardFormData = constructVtbCardFormData(boardState, payload, true);
				api.setState('cardForm', newCardFormData);
			}
			break;

		case VTB_CONFIRMATION_MODAL_SELECTED :
			const {modalId, modalData} = payload;
			api.setState('modalId', modalId);
			if (modalId === 'cardDetails') {
				api.setState('cardDetails', {
					...modalData,
					table: modalData.record.sys_class_name,
					recordId: modalData.record.sys_id,
					view: "workspace",
					isVisible: true
				});
			} else {
				api.setState('modalData', {
					...modalData,
					headerLabel: modalData.modalData.headerLabel,
					primaryButtonLabel: modalData.modalData.footerActions[0].label,
					secondaryButtonLabel: modalData.modalData.footerActions[1].label,
					content: modalData.modalData.content
				});
				helpers.modal.open("[component-id$='vtbConfirmationModal']");
			}
			break;

		case VTB_REMOVE_FREEFORM_PLACEHOLDER_CARD:
			output.newBoardState = removePlaceHolderCardHandler(boardState, payload);
			break;
		case VTB_ATTACHMENT_UPLOADED:
			uploadAttachmentHandler(api, snHttp, payload);
			break;
		case VTB_FREEFORM_CARD_ADDED:
			execGraphQLEndPoint('ADD_CARD', payload.createCardInput, api.emit);
			break;
		case VTB_CREATE_LANE_ACTION_PERFORMED :
			if(payload && payload.createLaneInput)
				execGraphQLEndPoint('CREATE_LANE_REQUEST', payload.createLaneInput, api.emit);
			break;
		case CARD_MOVED:
			output = moveCardOptimisticHandler(boardState, boardDirtyState, payload);
			break;

		case LANE_MOVED:
			output = moveLaneOptimisticHandler(boardState, boardDirtyState, payload);
			break;

		case SWIMLANE_MOVED:
			output = moveSwimlaneOptimisticHandler(boardState, boardDirtyState, payload);
			break;

		case VTB_LANE_HIDE_SELECTED:
			output = hideLaneOptimisticHandler(boardState, payload);
			break;

		case VTB_LANE_HEADER_UPDATED:
			if(payload && payload.updateLaneInput)
				output = laneHeaderOptimisticUpdateHandler(boardState, boardDirtyState, payload.updateLaneInput);
			break;

		case VTB_LANE_HOVERED:
			output = laneHoverHandler(boardState, payload);
			break;
	}

	if (output.newBoardState)
		setBoardState(api, output.newBoardState);

	if (output.newBoardDirtyState)
		setBoardDirtyState(api, output.newBoardDirtyState);

	if (output.dbPayload)
		execGraphQLEndPoint(output.dbPayload.operationName, output.dbPayload.operationPayload, dispatch);
}
]]></script>
        <script_api_version>2.0.0</script_api_version>
        <sys_class_name>sys_ux_client_script</sys_class_name>
        <sys_created_by>james.belote</sys_created_by>
        <sys_created_on>2022-03-09 01:42:49</sys_created_on>
        <sys_id>760e553e474e4150d384ee82e36d43c5</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Visual Board Client Specific Script</sys_name>
        <sys_package display_value="Electronic Medication Administration Record" source="x_snc_electronic_0">9e178adc472dc190d384ee82e36d4388</sys_package>
        <sys_policy/>
        <sys_scope display_value="Electronic Medication Administration Record">9e178adc472dc190d384ee82e36d4388</sys_scope>
        <sys_update_name>sys_ux_client_script_760e553e474e4150d384ee82e36d43c5</sys_update_name>
        <sys_updated_by>james.belote</sys_updated_by>
        <sys_updated_on>2022-03-09 01:42:49</sys_updated_on>
    </sys_ux_client_script>
</record_update>
