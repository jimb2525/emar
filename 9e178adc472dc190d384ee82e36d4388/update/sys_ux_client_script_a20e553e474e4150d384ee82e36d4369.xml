<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ux_client_script">
    <sys_ux_client_script action="INSERT_OR_UPDATE">
        <includes>881d20a10fe21010ad4437a98b767e2a,d67f1bbeb7e21010ad44ea56ee11a9d3,e3e0d376b7e21010ad44ea56ee11a924,a68702f6b7621010ad44ea56ee11a90e,e6a9d997b7b61010ad44ea56ee11a911</includes>
        <macroponent display_value="Visual Board Demo Page">5a0e553e474e4150d384ee82e36d4334</macroponent>
        <name>Visual Board Mutation Success Base Script</name>
        <required_translations/>
        <script><![CDATA[function script({api, event, imports, helpers}) {
    console.log("Mutation success");
    const {
        emit,
        setState,
        state,
        context,
        data,
        elements
    } = api;
    const {
        'sn_vtb.constants': constantsInclude,
        'sn_vtb.cardHandlers': cardHandlersInclude,
        'sn_vtb.laneHandlers': laneHandlersInclude,
        'sn_vtb.stateUpdates': stateUpdatesInclude,
        'sn_vtb.notificationHandler': notificationHandlerInclude
    } = imports;
    const {
        DATA_BROKER_OP: {
            CARD_MOVE,
            CARD_ARCHIVED,
            ARCHIVE_ALL_CARDS_BY_LANE,
            FETCH_ARCHIVE_CARD,
            FETCH_ARCHIVE_CARDS,
            RESTORE_CARD,
            CREATE_LANE_REQUEST,
            SET_USER_PREFERENCE,
            LANE_HEADER_UPDATED,
            DELETE_LANE,
            FETCH_VTB_USERS,
            FETCH_VTB_CARD,
            ADD_CARD
        }
    } = constantsInclude();
    const {
        moveCardSuccessHandler,
        archiveCardSuccessHandler,
        fetchArchiveCardSuccessHandler,
        fetchArchiveCardsSuccessHandler,
        restoreCardSuccessHandler,
        fetchVTBCardSuccessHandler,
        addCardSuccessHandler
    } = cardHandlersInclude();
    const {
        archiveCardsByLaneSuccessHandler,
        createLaneRequestSuccessHandler,
        setUserPreferenceSuccessHandler,
        updateLaneHeaderSuccessHandler,
        deleteLaneHeaderSuccessHandler,
        fetchVTBUsersSuccessHandler
    } = laneHandlersInclude();
    const {
        setBoardState,
        setBoardDirtyState,
        setBoardFocusState
    } = stateUpdatesInclude();
    const {
        showAlertAndInitiateDismiss
    } = notificationHandlerInclude();

    const {
        payload,
        payload: {
            operation
        }
    } = event;
    const {
        boardState,
        boardDirtyState = {},
        boardFocusState = {}
    } = state;
    const {
        [operation]: operationFailPayload,
        ...newBoardDirtyState
    } = boardDirtyState || {};

    let output = {};
    switch (operation) {
        case CARD_MOVE:
            output = moveCardSuccessHandler(boardState, payload, operationFailPayload);
            break;
        case CARD_ARCHIVED:
            let updatedBoardState = null;
            updatedBoardState = archiveCardSuccessHandler(boardState , boardFocusState, payload );
            output.newBoardState = updatedBoardState.newBoardDirtyState;
            output.newBoardFocusState = updatedBoardState.newBoardFocusState;
            output.dbPayload = updatedBoardState.dbPayload;
            break;
        case FETCH_ARCHIVE_CARDS:
            output.newBoardState = fetchArchiveCardsSuccessHandler(boardState, payload, emit);
            break;
        case FETCH_ARCHIVE_CARD:
            output.newBoardState = fetchArchiveCardSuccessHandler(boardState, payload, emit);
            break;
        case ARCHIVE_ALL_CARDS_BY_LANE:
            output.newBoardState = archiveCardsByLaneSuccessHandler(boardState, payload, emit);
            break;
        case RESTORE_CARD:
            output.newBoardState = restoreCardSuccessHandler(boardState, payload, emit);
            break;
        case LANE_HEADER_UPDATED:
            output.newBoardState = updateLaneHeaderSuccessHandler(boardState, payload, emit);
            break;
        case CREATE_LANE_REQUEST:
            output.newBoardState = createLaneRequestSuccessHandler(boardState, payload, emit);
            break;
        case SET_USER_PREFERENCE:
            output.newBoardState = setUserPreferenceSuccessHandler(boardState, payload, emit);
            break;
        case DELETE_LANE:
            output.newBoardState = deleteLaneHeaderSuccessHandler(boardState, payload, emit);
            break;
        case FETCH_VTB_USERS:
            output.newBoardState = fetchVTBUsersSuccessHandler(boardState, payload, emit);
            break;
        case FETCH_VTB_CARD:
            output.newBoardState = fetchVTBCardSuccessHandler(boardState, payload, emit);
            break;
        case ADD_CARD:
            let boardTempState = null;
            boardTempState = addCardSuccessHandler(boardState , boardFocusState , payload);
            output.newBoardState = boardTempState.newBoardDirtyState;
            output.newBoardFocusState = boardTempState.newBoardFocusState;
            break;
    }

    if (output.newBoardState)
        setBoardState(api, output.newBoardState);

    if (output.warningPayload)
        showAlertAndInitiateDismiss(api, output.warningPayload);

    if (output.newBoardFocusState)
        setBoardFocusState(api, output.newBoardFocusState);

    if (operationFailPayload)
        setBoardDirtyState(api, newBoardDirtyState);

    if (output.dbPayload)
       emit("UXF_DB_OP_TRIGGER_REQUESTED", output.dbPayload);
}]]></script>
        <script_api_version>2.0.0</script_api_version>
        <sys_class_name>sys_ux_client_script</sys_class_name>
        <sys_created_by>james.belote</sys_created_by>
        <sys_created_on>2022-03-09 01:42:47</sys_created_on>
        <sys_id>a20e553e474e4150d384ee82e36d4369</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Visual Board Mutation Success Base Script</sys_name>
        <sys_package display_value="Electronic Medication Administration Record" source="x_snc_electronic_0">9e178adc472dc190d384ee82e36d4388</sys_package>
        <sys_policy/>
        <sys_scope display_value="Electronic Medication Administration Record">9e178adc472dc190d384ee82e36d4388</sys_scope>
        <sys_update_name>sys_ux_client_script_a20e553e474e4150d384ee82e36d4369</sys_update_name>
        <sys_updated_by>james.belote</sys_updated_by>
        <sys_updated_on>2022-03-09 01:42:47</sys_updated_on>
    </sys_ux_client_script>
</record_update>
