<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ux_client_script">
    <sys_ux_client_script action="INSERT_OR_UPDATE">
        <includes>a68702f6b7621010ad44ea56ee11a90e,2bb5c53d0fa61010ad4437a98b767e7f,d67f1bbeb7e21010ad44ea56ee11a9d3,667b8fcfc7e120109a57797c95c26081,25bb0303c72520109a57797c95c26028,881d20a10fe21010ad4437a98b767e2a,17c0853d0fa61010ad4437a98b767e13</includes>
        <macroponent display_value="Visual Board Demo Page">5a0e553e474e4150d384ee82e36d4334</macroponent>
        <name>Visual Board Keypress Handler</name>
        <required_translations/>
        <script><![CDATA[function script({api, event, imports, helpers}) {

	
	if (event.payload && event.payload.event && event.payload.event.type === 'keydown') {
           console.log("keypressed");
		const {
			'sn_vtb.cardHandlers': cardHandlersInclude,
			'sn_vtb.cardManagerMethods': cardManagerMethodsInclude,
            'sn_vtb.utils':utilsInclude
		} = imports;
		const {
			addPlaceHolderCardhandler
		} = cardHandlersInclude();

	const {
			resetFocusableItemOnBoard
		} = utilsInclude();

		const {
			constructVtbCardFormData
		} = cardManagerMethodsInclude();
		
		const {ACCESSIBILITY} = imports['sn_vtb.constants']();
		const {closestDeep, querySelectorDeep} = imports['sn_vtb.VisualBoardAccessibilityUtils']();
		const {setBoardState, setBoardDirtyState} = imports['sn_vtb.stateUpdates']();
		const {
			LANE_HEADER_SELECTOR, LANE_HEADER_FIRST_ELEM_SELECTOR, ADD_CARD_SELECTOR, NOW_CARD_SELECTOR, CARD_FIRST_ELEM_SELECTOR
			, VTB_CARD_SELECTOR, SWIMLANE_HEADER_FIRST_ELEM_SELECTOR, SWIMLANE_HEADER_SELECTOR
		} = ACCESSIBILITY;
		const {
			boardState,
			boardDirtyState = {},
			boardFocusState = {}
		} = api.state;

		const subComponentsArrowNavigationDescriptor = {
			'sn-lane-header': {
				elementSelector: LANE_HEADER_SELECTOR,
				elementFirstChildSelector: LANE_HEADER_FIRST_ELEM_SELECTOR
			},
			'lane-footer-container': {
				elementSelector: ADD_CARD_SELECTOR,
				['Enter']: (activeElement) => {
					//Click Add card button
					if (activeElement && activeElement.matches(ADD_CARD_SELECTOR)) {
						let resullt;
						const snLane = closestDeep(activeElement, 'sn-lane');
						let updateState;
						const newCard = {
							position: 'bottom'
						};
						//Get laneId and swimlaneId of add-card button from dom
						//if swimlanes are enabled
						if (snLane.getAttribute('id').split('_')[0] !== 'lane') {
							newCard.swim_lane_id = snLane.getAttribute('id').split('_')[0];
							newCard.lane_id = snLane.getAttribute('id').split('_')[1];
						} else {
							newCard.lane_id = snLane.getAttribute('id').split('_')[1];
						}
						if (boardState.boardType === 'FREEFORM') {
							resullt = {};
							let newStateWithoutFocusedElement = resetFocusableItemOnBoard(boardState, boardFocusState);
							resullt.newBoardState = addPlaceHolderCardhandler(newStateWithoutFocusedElement, {card:newCard});
							resullt.newBoardDirtyState = boardState;
						}

						else {
							// For guided board we have to construct form for vtb card.
							const newCardFormData = constructVtbCardFormData(boardState, {card : newCard}, true);
							api.setState('cardForm', newCardFormData);
						}
						return resullt;
					}
				}
			},
			'sn-card-wrapper': {
				elementSelector: NOW_CARD_SELECTOR,
				elementFirstChildSelector: CARD_FIRST_ELEM_SELECTOR,
				closeDeepEle: (activeElement) => {
					let rootElement =  closestDeep(activeElement, VTB_CARD_SELECTOR);
					return querySelectorDeep(NOW_CARD_SELECTOR, rootElement);
				},
				getRootEle: (activeElement) => {
					return closestDeep(activeElement, VTB_CARD_SELECTOR);
				}
			},
			'sn-swimlane-header': {
				elementSelector: SWIMLANE_HEADER_SELECTOR,
				elementFirstChildSelector: SWIMLANE_HEADER_FIRST_ELEM_SELECTOR

			}
		};
		const onFocusLost = () => {
		};
		const {boardAccessibilityHandler} = imports['sn_vtb.VisualBoardAccessibilityHandler']();
		const result = boardAccessibilityHandler(event, subComponentsArrowNavigationDescriptor, onFocusLost);

		if (result && result.newBoardState) {
			setBoardState(api, result.newBoardState, helpers);
		}

		 if (result && result.newBoardDirtyState) {
			setBoardDirtyState(api, result.newBoardDirtyState);
		}

		if (newBoardState) 
			setBoardState(api, out.newBoardState);
	}

}
]]></script>
        <script_api_version>2.0.0</script_api_version>
        <sys_class_name>sys_ux_client_script</sys_class_name>
        <sys_created_by>james.belote</sys_created_by>
        <sys_created_on>2022-03-09 01:42:47</sys_created_on>
        <sys_id>ee0e553e474e4150d384ee82e36d437a</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Visual Board Keypress Handler</sys_name>
        <sys_package display_value="Electronic Medication Administration Record" source="x_snc_electronic_0">9e178adc472dc190d384ee82e36d4388</sys_package>
        <sys_policy/>
        <sys_scope display_value="Electronic Medication Administration Record">9e178adc472dc190d384ee82e36d4388</sys_scope>
        <sys_update_name>sys_ux_client_script_ee0e553e474e4150d384ee82e36d437a</sys_update_name>
        <sys_updated_by>james.belote</sys_updated_by>
        <sys_updated_on>2022-03-09 01:42:47</sys_updated_on>
    </sys_ux_client_script>
</record_update>
